# Generated from main/mt22/parser/MT22.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,56,447,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,3,0,127,8,0,1,1,1,1,1,1,1,2,
        1,2,1,2,3,2,135,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,
        33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,
        45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,5,49,319,8,49,10,
        49,12,49,322,9,49,1,50,1,50,3,50,326,8,50,1,50,1,50,1,51,3,51,331,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,342,8,51,
        1,51,1,51,1,52,1,52,5,52,348,8,52,10,52,12,52,351,9,52,1,52,1,52,
        1,52,1,53,1,53,5,53,358,8,53,10,53,12,53,361,9,53,1,53,1,53,4,53,
        365,8,53,11,53,12,53,366,5,53,369,8,53,10,53,12,53,372,9,53,1,54,
        1,54,5,54,376,8,54,10,54,12,54,379,9,54,1,55,1,55,3,55,383,8,55,
        1,55,4,55,386,8,55,11,55,12,55,387,1,56,1,56,1,56,1,56,5,56,394,
        8,56,10,56,12,56,397,9,56,1,56,1,56,1,57,1,57,1,57,5,57,404,8,57,
        10,57,12,57,407,9,57,1,57,1,57,1,57,1,57,1,57,1,58,4,58,415,8,58,
        11,58,12,58,416,1,58,1,58,1,59,1,59,1,59,1,60,1,60,5,60,426,8,60,
        10,60,12,60,429,9,60,1,60,1,60,1,60,1,61,1,61,5,61,436,8,61,10,61,
        12,61,439,9,61,1,61,1,61,1,61,3,61,444,8,61,1,61,1,61,1,405,0,62,
        1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,
        11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,
        22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,
        33,73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,
        44,95,45,97,46,99,47,101,48,103,49,105,50,107,0,109,0,111,0,113,
        51,115,52,117,53,119,54,121,55,123,56,1,0,13,1,1,10,10,5,0,8,10,
        12,13,34,34,39,39,92,92,3,0,8,9,12,13,39,39,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,69,69,101,101,
        2,0,43,43,45,45,2,0,10,10,12,13,3,0,9,10,13,13,32,32,7,0,39,39,92,
        92,98,98,102,102,110,110,114,114,116,116,1,0,92,92,460,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
        123,1,0,0,0,1,126,1,0,0,0,3,128,1,0,0,0,5,134,1,0,0,0,7,136,1,0,
        0,0,9,141,1,0,0,0,11,147,1,0,0,0,13,155,1,0,0,0,15,158,1,0,0,0,17,
        163,1,0,0,0,19,169,1,0,0,0,21,175,1,0,0,0,23,179,1,0,0,0,25,188,
        1,0,0,0,27,191,1,0,0,0,29,199,1,0,0,0,31,206,1,0,0,0,33,213,1,0,
        0,0,35,218,1,0,0,0,37,223,1,0,0,0,39,229,1,0,0,0,41,233,1,0,0,0,
        43,242,1,0,0,0,45,245,1,0,0,0,47,253,1,0,0,0,49,259,1,0,0,0,51,261,
        1,0,0,0,53,263,1,0,0,0,55,265,1,0,0,0,57,267,1,0,0,0,59,269,1,0,
        0,0,61,272,1,0,0,0,63,275,1,0,0,0,65,278,1,0,0,0,67,281,1,0,0,0,
        69,283,1,0,0,0,71,285,1,0,0,0,73,288,1,0,0,0,75,291,1,0,0,0,77,294,
        1,0,0,0,79,296,1,0,0,0,81,298,1,0,0,0,83,300,1,0,0,0,85,302,1,0,
        0,0,87,304,1,0,0,0,89,306,1,0,0,0,91,308,1,0,0,0,93,310,1,0,0,0,
        95,312,1,0,0,0,97,314,1,0,0,0,99,316,1,0,0,0,101,325,1,0,0,0,103,
        341,1,0,0,0,105,345,1,0,0,0,107,355,1,0,0,0,109,373,1,0,0,0,111,
        380,1,0,0,0,113,389,1,0,0,0,115,400,1,0,0,0,117,414,1,0,0,0,119,
        420,1,0,0,0,121,423,1,0,0,0,123,433,1,0,0,0,125,127,7,0,0,0,126,
        125,1,0,0,0,127,2,1,0,0,0,128,129,5,92,0,0,129,130,5,34,0,0,130,
        4,1,0,0,0,131,135,8,1,0,0,132,135,3,3,1,0,133,135,7,2,0,0,134,131,
        1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,6,1,0,0,0,136,137,5,
        97,0,0,137,138,5,117,0,0,138,139,5,116,0,0,139,140,5,111,0,0,140,
        8,1,0,0,0,141,142,5,98,0,0,142,143,5,114,0,0,143,144,5,101,0,0,144,
        145,5,97,0,0,145,146,5,107,0,0,146,10,1,0,0,0,147,148,5,98,0,0,148,
        149,5,111,0,0,149,150,5,111,0,0,150,151,5,108,0,0,151,152,5,101,
        0,0,152,153,5,97,0,0,153,154,5,110,0,0,154,12,1,0,0,0,155,156,5,
        100,0,0,156,157,5,111,0,0,157,14,1,0,0,0,158,159,5,101,0,0,159,160,
        5,108,0,0,160,161,5,115,0,0,161,162,5,101,0,0,162,16,1,0,0,0,163,
        164,5,102,0,0,164,165,5,97,0,0,165,166,5,108,0,0,166,167,5,115,0,
        0,167,168,5,101,0,0,168,18,1,0,0,0,169,170,5,102,0,0,170,171,5,108,
        0,0,171,172,5,111,0,0,172,173,5,97,0,0,173,174,5,116,0,0,174,20,
        1,0,0,0,175,176,5,102,0,0,176,177,5,111,0,0,177,178,5,114,0,0,178,
        22,1,0,0,0,179,180,5,102,0,0,180,181,5,117,0,0,181,182,5,110,0,0,
        182,183,5,99,0,0,183,184,5,116,0,0,184,185,5,105,0,0,185,186,5,111,
        0,0,186,187,5,110,0,0,187,24,1,0,0,0,188,189,5,105,0,0,189,190,5,
        102,0,0,190,26,1,0,0,0,191,192,5,105,0,0,192,193,5,110,0,0,193,194,
        5,116,0,0,194,195,5,101,0,0,195,196,5,103,0,0,196,197,5,101,0,0,
        197,198,5,114,0,0,198,28,1,0,0,0,199,200,5,114,0,0,200,201,5,101,
        0,0,201,202,5,116,0,0,202,203,5,117,0,0,203,204,5,114,0,0,204,205,
        5,110,0,0,205,30,1,0,0,0,206,207,5,115,0,0,207,208,5,116,0,0,208,
        209,5,114,0,0,209,210,5,105,0,0,210,211,5,110,0,0,211,212,5,103,
        0,0,212,32,1,0,0,0,213,214,5,116,0,0,214,215,5,114,0,0,215,216,5,
        117,0,0,216,217,5,101,0,0,217,34,1,0,0,0,218,219,5,118,0,0,219,220,
        5,111,0,0,220,221,5,105,0,0,221,222,5,100,0,0,222,36,1,0,0,0,223,
        224,5,119,0,0,224,225,5,104,0,0,225,226,5,105,0,0,226,227,5,108,
        0,0,227,228,5,101,0,0,228,38,1,0,0,0,229,230,5,111,0,0,230,231,5,
        117,0,0,231,232,5,116,0,0,232,40,1,0,0,0,233,234,5,99,0,0,234,235,
        5,111,0,0,235,236,5,110,0,0,236,237,5,116,0,0,237,238,5,105,0,0,
        238,239,5,110,0,0,239,240,5,117,0,0,240,241,5,101,0,0,241,42,1,0,
        0,0,242,243,5,111,0,0,243,244,5,102,0,0,244,44,1,0,0,0,245,246,5,
        105,0,0,246,247,5,110,0,0,247,248,5,104,0,0,248,249,5,101,0,0,249,
        250,5,114,0,0,250,251,5,105,0,0,251,252,5,116,0,0,252,46,1,0,0,0,
        253,254,5,97,0,0,254,255,5,114,0,0,255,256,5,114,0,0,256,257,5,97,
        0,0,257,258,5,121,0,0,258,48,1,0,0,0,259,260,5,43,0,0,260,50,1,0,
        0,0,261,262,5,45,0,0,262,52,1,0,0,0,263,264,5,42,0,0,264,54,1,0,
        0,0,265,266,5,47,0,0,266,56,1,0,0,0,267,268,5,37,0,0,268,58,1,0,
        0,0,269,270,5,38,0,0,270,271,5,38,0,0,271,60,1,0,0,0,272,273,5,124,
        0,0,273,274,5,124,0,0,274,62,1,0,0,0,275,276,5,61,0,0,276,277,5,
        61,0,0,277,64,1,0,0,0,278,279,5,33,0,0,279,280,5,61,0,0,280,66,1,
        0,0,0,281,282,5,60,0,0,282,68,1,0,0,0,283,284,5,62,0,0,284,70,1,
        0,0,0,285,286,5,60,0,0,286,287,5,61,0,0,287,72,1,0,0,0,288,289,5,
        62,0,0,289,290,5,61,0,0,290,74,1,0,0,0,291,292,5,58,0,0,292,293,
        5,58,0,0,293,76,1,0,0,0,294,295,5,33,0,0,295,78,1,0,0,0,296,297,
        5,91,0,0,297,80,1,0,0,0,298,299,5,93,0,0,299,82,1,0,0,0,300,301,
        5,123,0,0,301,84,1,0,0,0,302,303,5,125,0,0,303,86,1,0,0,0,304,305,
        5,40,0,0,305,88,1,0,0,0,306,307,5,41,0,0,307,90,1,0,0,0,308,309,
        5,44,0,0,309,92,1,0,0,0,310,311,5,59,0,0,311,94,1,0,0,0,312,313,
        5,58,0,0,313,96,1,0,0,0,314,315,5,61,0,0,315,98,1,0,0,0,316,320,
        7,3,0,0,317,319,7,4,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,
        1,0,0,0,320,321,1,0,0,0,321,100,1,0,0,0,322,320,1,0,0,0,323,326,
        3,107,53,0,324,326,5,48,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,
        327,1,0,0,0,327,328,6,50,0,0,328,102,1,0,0,0,329,331,3,101,50,0,
        330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,3,109,54,
        0,333,334,3,111,55,0,334,342,1,0,0,0,335,336,3,101,50,0,336,337,
        3,109,54,0,337,342,1,0,0,0,338,339,3,101,50,0,339,340,3,111,55,0,
        340,342,1,0,0,0,341,330,1,0,0,0,341,335,1,0,0,0,341,338,1,0,0,0,
        342,343,1,0,0,0,343,344,6,51,1,0,344,104,1,0,0,0,345,349,5,34,0,
        0,346,348,3,5,2,0,347,346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,
        0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,353,5,34,0,
        0,353,354,6,52,2,0,354,106,1,0,0,0,355,359,7,5,0,0,356,358,7,6,0,
        0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,
        0,360,370,1,0,0,0,361,359,1,0,0,0,362,364,5,95,0,0,363,365,7,6,0,
        0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,
        0,367,369,1,0,0,0,368,362,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,
        0,370,371,1,0,0,0,371,108,1,0,0,0,372,370,1,0,0,0,373,377,5,46,0,
        0,374,376,7,6,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,
        0,377,378,1,0,0,0,378,110,1,0,0,0,379,377,1,0,0,0,380,382,7,7,0,
        0,381,383,7,8,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,
        0,384,386,7,6,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,
        0,387,388,1,0,0,0,388,112,1,0,0,0,389,390,5,47,0,0,390,391,5,47,
        0,0,391,395,1,0,0,0,392,394,8,9,0,0,393,392,1,0,0,0,394,397,1,0,
        0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,
        0,0,398,399,6,56,3,0,399,114,1,0,0,0,400,401,5,47,0,0,401,405,5,
        42,0,0,402,404,9,0,0,0,403,402,1,0,0,0,404,407,1,0,0,0,405,406,1,
        0,0,0,405,403,1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,
        42,0,0,409,410,5,47,0,0,410,411,1,0,0,0,411,412,6,57,3,0,412,116,
        1,0,0,0,413,415,7,10,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,
        1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,6,58,3,0,419,118,
        1,0,0,0,420,421,9,0,0,0,421,422,6,59,4,0,422,120,1,0,0,0,423,427,
        5,34,0,0,424,426,3,5,2,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,
        1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,
        3,1,0,0,431,432,6,60,5,0,432,122,1,0,0,0,433,437,5,34,0,0,434,436,
        3,5,2,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,
        1,0,0,0,438,443,1,0,0,0,439,437,1,0,0,0,440,441,5,92,0,0,441,444,
        8,11,0,0,442,444,8,12,0,0,443,440,1,0,0,0,443,442,1,0,0,0,444,445,
        1,0,0,0,445,446,6,61,6,0,446,124,1,0,0,0,20,0,126,134,320,325,330,
        341,349,359,366,370,377,382,387,395,405,416,427,437,443,7,1,50,0,
        1,51,1,1,52,2,6,0,0,1,59,3,1,60,4,1,61,5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AUTO = 1
    BREAK = 2
    BOOLEAN = 3
    DO = 4
    ELSE = 5
    FALSE = 6
    FLOAT = 7
    FOR = 8
    FUNCTION = 9
    IF = 10
    INTEGER = 11
    RETURN = 12
    STRING = 13
    TRUE = 14
    VOID = 15
    WHILE = 16
    OUT = 17
    CONTINUE = 18
    OF = 19
    INHERIT = 20
    ARRAY = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    AND = 27
    OR = 28
    EQ = 29
    NOT_EQ = 30
    LT = 31
    GT = 32
    LTE = 33
    GTE = 34
    CONCAT = 35
    NEGATION = 36
    SQ_OPEN = 37
    SQ_CLOSE = 38
    CUR_OPEN = 39
    CUR_CLOSE = 40
    R_OPEN = 41
    R_CLOSE = 42
    COMMA = 43
    SEMI_COLON = 44
    COLON = 45
    ASSIGN = 46
    ID = 47
    INT_LIT = 48
    FLOAT_LIT = 49
    STR_LIT = 50
    CMTLINE = 51
    CMTBLOCK = 52
    WS = 53
    ERROR_CHAR = 54
    UNCLOSE_STRING = 55
    ILLEGAL_ESCAPE = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'auto'", "'break'", "'boolean'", "'do'", "'else'", "'false'", 
            "'float'", "'for'", "'function'", "'if'", "'integer'", "'return'", 
            "'string'", "'true'", "'void'", "'while'", "'out'", "'continue'", 
            "'of'", "'inherit'", "'array'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'::'", "'!'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
            "','", "';'", "':'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", 
            "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", "TRUE", 
            "VOID", "WHILE", "OUT", "CONTINUE", "OF", "INHERIT", "ARRAY", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "AND", "OR", "EQ", "NOT_EQ", 
            "LT", "GT", "LTE", "GTE", "CONCAT", "NEGATION", "SQ_OPEN", "SQ_CLOSE", 
            "CUR_OPEN", "CUR_CLOSE", "R_OPEN", "R_CLOSE", "COMMA", "SEMI_COLON", 
            "COLON", "ASSIGN", "ID", "INT_LIT", "FLOAT_LIT", "STR_LIT", 
            "CMTLINE", "CMTBLOCK", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "Unterminated", "DoubleQuote", "Character", "AUTO", "BREAK", 
                  "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", "FOR", "FUNCTION", 
                  "IF", "INTEGER", "RETURN", "STRING", "TRUE", "VOID", "WHILE", 
                  "OUT", "CONTINUE", "OF", "INHERIT", "ARRAY", "ADD", "SUB", 
                  "MUL", "DIV", "MOD", "AND", "OR", "EQ", "NOT_EQ", "LT", 
                  "GT", "LTE", "GTE", "CONCAT", "NEGATION", "SQ_OPEN", "SQ_CLOSE", 
                  "CUR_OPEN", "CUR_CLOSE", "R_OPEN", "R_CLOSE", "COMMA", 
                  "SEMI_COLON", "COLON", "ASSIGN", "ID", "INT_LIT", "FLOAT_LIT", 
                  "STR_LIT", "DEC", "F_Dec", "F_Exp", "CMTLINE", "CMTBLOCK", 
                  "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[50] = self.INT_LIT_action 
            actions[51] = self.FLOAT_LIT_action 
            actions[52] = self.STR_LIT_action 
            actions[59] = self.ERROR_CHAR_action 
            actions[60] = self.UNCLOSE_STRING_action 
            actions[61] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.text = self.text.replace('_', '') 
     

    def FLOAT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             self.text = self.text.replace('_', '') 
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                temp = self.text
                self.text = temp[1:-1]

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                esc = ['\n']
                temp = str(self.text)
                if (temp[-1] in esc):
                    raise UncloseString(temp[1:-1])
                else:
                    raise UncloseString(temp[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                temp = self.text
                raise IllegalEscape(temp[1:])

     


